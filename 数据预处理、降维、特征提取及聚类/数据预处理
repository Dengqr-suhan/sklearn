import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
X, y = make_blobs(n_samples=40, centers=2, random_state=50, cluster_std=2)
plt.scatter(X[:,0], X[:,1], c=y, cmap=plt.cm.cool)
plt.show()
#接下来，我们先用standascaler
from sklearn.preprocessing import StandardScaler
X_1 = StandardScaler().fit_transform(X)
plt.scatter(X_1[:,0], X_1[:,1], c=y, cmap=plt.cm.cool)
plt.show()
#minmaxscaler归一化
from sklearn.preprocessing import MinMaxScaler
X_2 = MinMaxScaler().fit_transform(X)
plt.scatter(X_2[:,0], X_2[:,1], c=y, cmap=plt.cm.cool)
plt.show()
#robustscaler
from sklearn.preprocessing import RobustScaler
X_3 = RobustScaler().fit_transform(X)
plt.scatter(X_3[:,0], X_3[:,1], c=y, cmap=plt.cm.cool)
plt.show()
#normalizer
from sklearn.preprocessing import Normalizer
X_4 = Normalizer().fit_transform(X)
plt.scatter(X_4[:,0], X_4[:,1], c=y, cmap=plt.cm.cool)
plt.show()

#数据预处理可以提高模型的准确性
from sklearn.datasets import load_wine
from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import train_test_split
wine = load_wine()
X_train, X_test, y_train, y_test = train_test_split(wine.data, wine.target, random_state=62)
print(X_train.shape, X_test.shape)

mlp = MLPClassifier(hidden_layer_sizes=[100,100], max_iter=400, random_state=62)
mlp.fit(X_train, y_train)
print(mlp.score(X_test, y_test))

#数据预处理
scaler = MinMaxScaler()
scaler.fit(X_train)
X_train_pp = scaler.transform(X_train)
X_test_pp = scaler.transform(X_test)
mlp.fit(X_train_pp, y_train)
print(mlp.score(X_test_pp, y_test))
